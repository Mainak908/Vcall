import React, { useState, useEffect, useRef } from 'react';
import Peer from 'peerjs';

function App() {
  const [myPeerId, setMyPeerId] = useState('');            //id of local client generated by peerjs
  const [peerIdInput, setPeerIdInput] = useState('');      // id of remote client entered by user
  const [peer, setPeer] = useState(null);                   //peer instance
  const [stream, setStream] = useState(null);              //stores local media 
  const [isMuted, setIsMuted] = useState(false);
  const [isVideoOn, setIsVideoOn] = useState(true);
  const currvideoRef = useRef(null);                          //use to access videoelement of dom
  const remotevideoref = useRef(null);

  useEffect(() => {
    const peer = new Peer();
    peer.on('open', (peerId) => {
      setMyPeerId(peerId);
    });
    peer.on('call', (call) =>{                        //receiving call with mediastream
      call.answer(stream)
    })
    setPeer(peer);
  }, [stream]);

  const handleConnect = () => {
    if (stream) {
      const call = peer.call(peerIdInput, stream);      //call function
      call.on('stream', (remoteStream) => {
        remotevideoref.current.srcObject = remoteStream
        remotevideoref.current.play();
      });
    }
  };

  const handleToggleMute = () => {
    setIsMuted(prevState => !prevState);
    stream.getAudioTracks()[0].enabled = !isMuted;
  };

  const handleToggleVideo = () => {
    setIsVideoOn(prevState => !prevState);
    stream.getVideoTracks()[0].enabled = isVideoOn;
  };

  const handleStream = (mediaStream) => {
    setStream(mediaStream);
    if (currvideoRef.current) {
      currvideoRef.current.srcObject = mediaStream;
    }
  };

  const handleStreamError = (error) => {
    console.error('Error accessing media devices.', error);
  };

  const handleGetMedia = async () => {
    try {
      const mediaStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true,
      });
      handleStream(mediaStream);
    } catch (error) {
      handleStreamError(error);
    }
  };

  return (
    <div>
      <h1>Video Call App</h1>
      <p>My peer ID: {myPeerId}</p>
      <input
        type="text"
        value={peerIdInput}
        onChange={(e) => setPeerIdInput(e.target.value)}
      />
      <button onClick={handleConnect}>Connect</button>
      <button onClick={handleToggleMute}>
        {isMuted ? 'Unmute' : 'Mute'}
      </button>
      <button onClick={handleToggleVideo}>
        {isVideoOn ? 'Turn off video' : 'Turn on video'}
      </button>
      <button onClick={handleGetMedia}>Start</button>
      <div>
        <video ref={currvideoRef} autoPlay />
      </div>
      <div>
        <video ref={remotevideoref} autoPlay />
      </div>
    </div>
  );
}

export default App;


